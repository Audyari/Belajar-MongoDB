Beberapa Query Operator Yang Perlu Kamu Coba


1. "C:\Program Files\MongoDB\Server\7.0\bin\mongod.exe" --dbpath="c:\data\db"

2. baru ketik mongosh

==========================================

testing 1  : 

1. show dbs 
2. use Aplikasi
3. db 
4. db.getCollectionNames()  // cara cek nama collections atau table
5. db.users.find() // cek isi data users

=============================


testing ke 2 :

1. Memasukkan satu dokumen:

db.users.insert({
    name: "John Doe",
    email: "john@example.com",
    age: 30
})

2. Memasukkan beberapa dokumen:

db.users.insertMany([
    {
        name: "Jane Doe",
        email: "jane@example.com",
        age: 25
    },
    {
        name: "Bob Smith",
        email: "bob@example.com",
        age: 40
    }
])

==============================

3. Perintah Find Dan Findone Di Mongodb

*****find():*****

// Mencari semua dokumen dalam koleksi "users"
db.users.find()

// Mencari dokumen dengan nama "John"
db.users.find({ name: "John" })

// Menampilkan hanya field "name" dan "email"
db.users.find({}, { name: 1, email: 1, _id: 0 })


******findOne():******

// Mengambil satu dokumen dari koleksi "users"
db.users.findOne()

// Mengambil satu dokumen dengan nama "John"
db.users.findOne({ name: "John" })

// Menampilkan hanya field "name" dan "email"
db.users.findOne({ name: "John" }, { name: 1, email: 1, _id: 0 })

=====================================


testng 2 Perintah Updateone Dan Updatemany Di Mongodb

db.users.updateOne(
  { username: "johndoe" },
  { $set: { email: "johndoe@example.com" }}
)

********************************************

db.users.updateMany(
  { active: false },
  { $set: { status: "inactive" }}
)

**************************************

db.users.updateOne(
  { username: "newuser" },
  { $set: { email: "newuser@example.com" }},
  { upsert: true }
)

===================================


4. Perintah Deleteone Dan Deletemany Di Mongodb :

deleteOne()

db.products.deleteOne({ _id: ObjectId("507f1f77bcf86cd799439011") })

*************************************************

deleteMany()

db.products.deleteMany({ category: "Electronics" })

=====================================================

Beberapa Query Operator Yang Perlu Kamu Coba : 

ada 8 yg perlu kamu coba :

1. $eq (Equal):

db.users.find({ age: { $eq: 30 } })

Query ini akan mencari semua dokumen dalam koleksi "users" di mana nilai field "age" sama dengan 30.
******************************************************

2. $gt (Greater Than) dan $gte (Greater Than or Equal):

db.users.find({ age: { $gt: 30 } })
db.users.find({ age: { $gte: 30 } })

Query pertama akan mencari semua dokumen di mana usia lebih besar dari 30, sedangkan query kedua akan mencari semua dokumen di mana usia lebih besar atau sama dengan 30.
*****************************************************************************************************************************

3.$lt (Less Than) dan $lte (Less Than or Equal):

db.users.find({ age: { $lt: 30 } })
db.users.find({ age: { $lte: 30 } })

Query pertama akan mencari semua dokumen di mana usia kurang dari 30, sedangkan query kedua akan mencari semua dokumen di mana usia kurang dari atau sama dengan 30.
*************************************************************************************************************

4.$in:

db.users.find({ category: { $in: ["Electronics", "Books"] } })

Query ini akan mencari semua dokumen di mana nilai field "category" ada dalam array ["Electronics", "Books"].
**********************************************************************

5.$nin (Not In):

db.users.find({ category: { $nin: ["Electronics", "Books"] } })

Query ini akan mencari semua dokumen di mana nilai field "category" tidak ada dalam array ["Electronics", "Books"].
**************************************************************************

6. $and:

db.users.find({
  $and: [
    { age: { $gt: 30 } },
    { age: { $lt: 50 } }
  ]
})

Query ini akan mencari semua dokumen di mana usia lebih besar dari 30 dan kurang dari 50.
*************************************************************

7. $or:

db.users.find({
  $or: [
    { category: "Electronics" },
    { category: "Books" }
  ]
})

Query ini akan mencari semua dokumen di mana nilai field "category" adalah "Electronics" atau "Books".
*****************************************************************************

8. $regex:

db.users.find({ name: { $regex: /^John/ } })

Query ini akan mencari semua dokumen di mana nilai field "name" dimulai dengan "John".
*********************************************************************************************







